TDD
테스트 먼저 작성한다.

레드 그린 리팩토링
1. 레드 먼저
- 실패를 위한 테스트가 아님
- 프로덕션 코드(구현부)가 없이 먼저 작성하기 때문에 실패한다. 그래서 레드 테스트라고 한다.
- 최소한 컴파일은 되는 정도는 메서드를 구현해줘도 좋다.

2. 그린
- 빠른시간내에 테스트를 통과할 수 있도록 구현부를 작성
- 구현이 어거지로 되도 좋으니 일단 통과를 목적으로 작성한다.


3.리팩토링
- 그린이후에 통과된 코드를 개선시킨다.
(그럼 리팩토링 하면서 생기는 오류는 어떻게 잡아?)
테스트가 통과를 보장해주기 때문에
코드를 바꾸는데에 부담이 없다.


-TDD의 장점이자 핵심 가치
피드백
: 내가 작성한 코드에 대한 피드백을 받을 수 있음
누락된 코드혹은 검증에 대해
작성한 케이스에 대한 좀 더 정확하고 객관적인 테스트를 가능하게 해준다.

-TDD의 순서대로 한다면
+ 잘못된 구현이 있는 경우 테스트를 미루다 보면
구현을 잊어버릴수도 있고, 나중에 추가되는 코드에 대해서도 추가와 검증이 어려운데
이를 방지할 수 있다.

-복잡도를 낮출수도 있다
CafeKiosk의 createOrder의 LocalDateTime 으로 구현해야 될 생각을 하기 힘들었을것.

-빠른피드백과 경계값 테스트, 과감한 리팩토링도 가능하게 해준다.

-즉, TDD는 테스트와 프로덕션 코드가 상호작용하면서 기능구현을 하는 방식
또한 TDD는 클라이언트 관점에서 피드백을 준다.

-키워드
: 애자일 방법론 ,xp ,스크럼, 칸반

****
테스트는 문서이다.
- 테스트코드가 프로덕션 기능을 설명하는 문서가 될 수 있다.
- 이전에 고민했던 결과물로서, 문제와 해결에 대한 결과를
팀 차원에서 공유할 수 있는 문서가 된다.

diplayName
테스트의 메서드의 이름을 어떻게 해야할까 => @displayName을 통해서 명확하게 해주자
명확하게, 처음보는 사람들도 displayName을 보고도 뭘 테스트 하는지 알 수 있도록 노력하자
A는 B이다. 와 같은 문장형태가 좋다.
어떤 상태가 주어졌을때
어떤 행위를 가했고
어떤 상태변화가 있었다(결과)
와 같은 내용이 문장에 들어있으면 더 좋다.

특정 시간 이전과 같은 일반적인 용어를 사용하는 것보다
클라이언트 입장의 시간, 영업시작 시간과 같은 용어,
즉 도메인영역의 용어를 사용하는 것이 더 좋다.
메서드 자체의 관점보다 도메인 정책을 관점으로 보는것이 중요하다.
또 테스트 현상을 중점으로 기술하지 말 것

**********
BDD = Behavior Driven Development
- TDD 에서 파생된 개발 방법
- 개발한 메서드에 초점을 두는것이 아닌, 특정 시나리오, 케이스에 대해 초점을 두고 개발과 테스트를 하는 방식
- 개발자가 아닌 사람이 봐도 이 테스트가 무엇을 위한 테스트인지, 테스트 문서로서도 활용할 수 있게끔 추상화 수준을 권장함

*******
givne/ when/ then 형식의 작성

given: 시나리오를 따라 테스트를 진행하기 위해 필요한 준비과정을 준비하는 단계, 객체 초기화나 상태값 세팅등이 이 단계에서 이루어짐
when: 시나리오 행동 진행
then: 시나리오 진행에 대한 결과 검증과 결과의 명시

given(어떤 환경에서) + when (어떤 행동을 진행했을때) + then(어떤 결과가 나타난다) => displayName에 명확하게 문장을 작성할때도 이용이 가능하다.

*************
spock : bdd 프레임워크, 그루비 언어로 테스트를 한다. given,when,then 을 프레임워크 차원에서 지원해준다.
junit :



